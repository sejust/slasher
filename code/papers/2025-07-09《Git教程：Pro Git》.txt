- Git 从根本上来说是一个内容寻址文件系统
- 每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引
- SHA-1 是基于Git中文件的内容或目录结构计算出来的，是该文件系统的索引；而不是文件名
- Git 支持两种标签(tag)：轻量标签和附注标签
- 暂存操作会为每一个文件计算校验和
- Git 的分支实质上仅是包含所指对象校验和的文件，所以它的创建和销毁都异常高效
- Merge 提交点特别之处在于，它有不止一个父提交
- reset 和 checkout 的三棵树：
	HEAD：上一次提交的快照，下一次提交的父结点
	Index：预期的下一次提交的快照
	Working Directory：沙盒

Git 内部原理：
Git 对象 object
  - 分类
	1、blob object：保存文件内容
	2、tree object：解决文件名保存问题
	3、commit object：记录谁、什么时间、为什么保存一系列的快照
	4、tag object：标签对象非常类似于提交对象，但标签对象通常指向于一个提交对象
  - 存储
  	Git 首先会以识别出的对象的类型作为开头来构造一个头部信息
  	header = "blob #{content.length}\0"
  	hash(header + content)
  	通过 zlib 压缩新内容
Git 引用 reference
  - HEAD 引用：HEAD 文件通常是一个符号引用（symbolic reference），指向目前所在的分支
  - 标签引用：标签对象通常指向一个提交对象
  - 远程引用：和分支之间区别在于，远程引用是只读的
包文件：git gc
  Git 最初向磁盘中存储对象时所使用的格式被称为"松散（loose）"对象格式
  Git 会时不时地将多个这些对象打包成一个称为"包文件（packfile）"的二进制文件，以节省空间和提高效率
  Git 打包对象时，会查找命名及大小相近的文件，并只保存文件不同版本之间的差异内容
  Git 保存最新版本是完整文件内容，而原始的版本反而是以差异方式保存的；这是因为大部分情况下需要快速访问文件的最新版本
引用规范：refspec
传输协议：哑协议、智能协议[SSH、HTTP(s)]
维护与数据恢复
环境变量